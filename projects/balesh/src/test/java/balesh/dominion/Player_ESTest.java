/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 20 19:38:40 GMT 2017
 */

package balesh.dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import balesh.dominion.Card;
import balesh.dominion.GameState;
import balesh.dominion.Player;
import balesh.dominion.Randomness;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "rfHwW2n;k6J:h&ph-");
      List<Card> list1 = player0.playedCards;
      player0.playedCards = list0;
      player0.toString();
      player0.discard = gameState0.cards;
      gameState0.cards = null;
      Randomness.nextRandomInt((-987));
      player0.scoreFor();
      Randomness.nextRandomInt((-987));
      player0.player_username = "<4vJB `Tl'ew";
      Randomness.totalCallsToRandom = 0;
      player0.playedCards = null;
      LinkedList<Card> linkedList0 = player0.deck;
      player0.deck = linkedList0;
      player0.scoreFor();
      Randomness.nextRandomInt(1);
      LinkedList<Card> linkedList1 = player0.deck;
      player0.hand = (List<Card>) linkedList1;
      int int0 = Randomness.totalCallsToRandom;
      Player player1 = new Player(gameState0, "Hand: []Discard: []Deck: []Played Cards: [ \n\tGold,  \n\tSilver,  \n\tCopper,  \n\tProvince,  \n\tDuchy,  \n\tEstate,  \n\tCurse,  \n\tAdventurer,  \n\tWitch,  \n\tMine,  \n\tLaboratory,  \n\tThief,  \n\tSmithy,  \n\tMoneylender,  \n\tVillage,  \n\tWoodcutter,  \n\tChancellor,  \n\tMoat,  \n\tCellar,  \n\tChapel]numAtions: 0coins:0numBuys: 0\n");
      player1.drawCard();
      player1.gain((Card) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      Card.CardName card_CardName0 = Card.CardName.Curse;
      Card.getCard(gameState0.cards, card_CardName0);
      Card.createCards();
      arrayList0.add((Card) null);
      Player player0 = new Player(gameState0, "draw ");
      player0.player_username = "EaEb6O khK?l00>S";
      player0.coins = 1763;
      player0.scoreFor();
      // Undeclared exception!
      try { 
        gameState0.isGameOver();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("balesh.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom((-1186));
      Player player0 = new Player((GameState) null, "5i");
      player0.playKingdomCard();
      LinkedList<Card> linkedList0 = player0.deck;
      player0.deck = linkedList0;
      player0.hand = null;
      // Undeclared exception!
      try { 
        player0.drawCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("balesh.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      GameState gameState1 = gameState0.clone();
      gameState1.play();
      gameState0.cards = (List<Card>) stack0;
      Player player0 = new Player(gameState1, (String) null);
      player0.playTreasureCard();
      gameState0.getWinners();
      player0.endTurn();
      LinkedList<Card> linkedList0 = player0.deck;
      List<Card> list0 = Card.createCards();
      Card.CardName card_CardName0 = Card.CardName.Smithy;
      Card card0 = Card.getCard(list0, card_CardName0);
      linkedList0.push(card0);
      List<Card> list1 = player0.hand;
      player0.drawCard();
      player0.playedCards = (List<Card>) linkedList0;
      // Undeclared exception!
      try { 
        player0.playKingdomCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("balesh.dominion.Card", e);
      }
  }

  //@Test(timeout = 4000)
  //public void test04()  throws Throwable  {
  //    Stack<Card> stack0 = new Stack<Card>();
  //    GameState gameState0 = new GameState((List<Card>) stack0);
  //    Player player0 = new Player(gameState0, " ---m");
  //    Stack<Player> stack1 = new Stack<Player>();
  //    gameState0.addPlayer(player0);
  //    List<Card> list0 = Card.createCards();
  //    Card.CardName card_CardName0 = Card.CardName.Laboratory;
  //    Card card0 = Card.getCard(list0, card_CardName0);
  //    stack0.add(card0);
  //    // Undeclared exception!
  //    try { 
  //      player0.buyCard();
  //      fail("Expecting exception: NullPointerException");
  //    
  //    } catch(NullPointerException e) {
  //       //
  //       // no message in exception (getMessage() returned null)
  //       //
  //       assertThrownBy("balesh.dominion.Player", e);
  //    }
  //}

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player((GameState) null, "--- ");
      player0.numActions = (-6);
      player0.playKingdomCard();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Card.Type.values();
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "ImP9l#iQC");
      Player player1 = new Player(gameState0, "ImP9l#iQC");
      player1.initializePlayerTurn();
      player1.discard = list0;
      player0.coins = (-45);
      player1.drawCard();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Player player0 = new Player(gameState0, "+$2;You may immediately put your deck into your discard pile.");
      player0.drawCard();
      player0.numBuys = 5;
      stack0.add((Card) null);
      // Undeclared exception!
      try { 
        player0.playTreasureCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("balesh.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player((GameState) null, "Player coins before adding TREASURE cards: ");
      player0.toString();
      player0.numActions = 654;
      List<Card> list0 = player0.Trash;
      player0.playedCards = list0;
      player0.toString();
      player0.toString();
      Random.setNextRandom(3);
      int int0 = player0.numActions;
      Player player1 = new Player((GameState) null, "Player.actionPhase Card: ");
      LinkedList<Card> linkedList0 = player1.deck;
      player0.deck = linkedList0;
      player0.playedCards = (List<Card>) linkedList0;
      player0.hand = list0;
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      player1.playKingdomCard();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Randomness.random = null;
      Player player0 = new Player((GameState) null, (String) null);
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      player0.playKingdomCard();
      player0.hand = (List<Card>) arrayList0;
      player0.hand = (List<Card>) arrayList0;
      player0.playTreasureCard();
      player0.playTreasureCard();
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("balesh.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = Randomness.totalCallsToRandom;
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "");
      player0.drawCard();
      List<Card> list1 = Card.createCards();
      Card.Type card_Type0 = Card.Type.ACTION;
      Card.filter(list1, card_Type0);
      player0.discard((Card) null);
      player0.numBuys = 3;
      // Undeclared exception!
      try { 
        player0.scoreFor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("balesh.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "");
      gameState0.cards = (List<Card>) vector0;
      player0.playTreasureCard();
      player0.printStateGame();
      player0.playTreasureCard();
      player0.playedCards = gameState0.cards;
      player0.deck = null;
      player0.playedCards = (List<Card>) vector0;
      // Undeclared exception!
      try { 
        player0.endTurn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("balesh.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player((GameState) null, "eCU|gvbP$b[");
      player0.endTurn();
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      player0.hand = (List<Card>) arrayList0;
      player0.scoreFor();
      player0.drawCard();
      LinkedList<Card> linkedList0 = player0.deck;
      Card.Type.values();
      player0.toString();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, "(4(tTio4");
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      vector0.add((Card) null);
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, ";p*VCQN!A+*]Jz'q");
      player0.discard = (List<Card>) vector0;
      // Undeclared exception!
      try { 
        player0.scoreFor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("balesh.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "WJ");
      player0.hand = (List<Card>) vector0;
      player0.toString();
      int int0 = Randomness.totalCallsToRandom;
      gameState0.play();
      Randomness.totalCallsToRandom = (-4217);
      // Undeclared exception!
      try { 
        player0.buyCard();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         assertThrownBy("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      Player player0 = new Player(gameState0, "~z.os");
      Card.CardName card_CardName0 = Card.CardName.Copper;
      Card.getCard(stack0, card_CardName0);
      player0.discard((Card) null);
      int int0 = player0.numBuys;
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      GameState gameState1 = gameState0.clone();
      gameState1.cards = (List<Card>) stack0;
      GameState gameState2 = gameState0.clone();
      stack0.addAll((Collection<? extends Card>) gameState1.cards);
      Player player0 = new Player(gameState1, "njJ0#:Wkr{vBkwBVn");
      int int0 = player0.numBuys;
      player0.scoreFor();
      player0.discard = gameState0.cards;
      player0.discard = gameState1.cards;
      player0.endTurn();
      player0.endTurn();
      List<Card> list0 = player0.hand;
      Player player1 = new Player(gameState2, "njJ0#:Wkr{vBkwBVn");
      player0.discard = gameState0.cards;
      player0.drawCard();
      player0.gain((Card) null);
      Card.Type.values();
      // Undeclared exception!
      try { 
        player0.playKingdomCard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("balesh.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Randomness.nextRandomInt(2354);
      Randomness.totalCallsToRandom = 2354;
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, "");
      gameState0.addPlayer(player0);
      gameState1.cards = gameState0.cards;
      player0.scoreFor();
      try { 
        player0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // balesh.dominion.Player
         //
         assertThrownBy("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      GameState gameState1 = gameState0.clone();
      gameState1.play();
      gameState1.cards = (List<Card>) stack0;
      Player player0 = new Player(gameState1, (String) null);
      player0.playedCards = gameState1.cards;
      player0.playTreasureCard();
      player0.coins = 1059;
      gameState0.getWinners();
      player0.endTurn();
      LinkedList<Card> linkedList0 = player0.deck;
      List<Card> list0 = player0.hand;
      player0.drawCard();
      player0.hand = (List<Card>) linkedList0;
      player0.playedCards = (List<Card>) linkedList0;
      player0.playKingdomCard();
      player0.drawCard();
      Player player1 = new Player(gameState1, "]");
      player1.discard = gameState0.cards;
      player0.coins = 0;
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player((GameState) null, "buc,WF39tf^*k)u0Ph");
      // Undeclared exception!
      try { 
        player0.printStateGame();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("balesh.dominion.Player", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Randomness.nextRandomInt(475);
      Randomness.random = null;
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "HAND TO REMOVE ");
      gameState0.cards = (List<Card>) vector0;
      gameState0.cards = (List<Card>) vector0;
      int int0 = player0.coins;
      player0.playedCards = gameState0.cards;
      player0.numBuys = 475;
      player0.playKingdomCard();
      List<Card> list0 = player0.Trash;
      // Undeclared exception!
      try { 
        Randomness.nextRandomInt(7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("balesh.dominion.Randomness", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      List<Card> list0 = Card.createCards();
      arrayList0.addAll((Collection<? extends Card>) list0);
      List<Player> list1 = gameState0.players;
      Card.CardName card_CardName0 = Card.CardName.Gold;
      Card card0 = Card.getCard(arrayList0, card_CardName0);
      gameState0.getWinners();
      Card.Type card_Type0 = Card.Type.ACTION;
      Card.filter(list0, card_Type0);
      arrayList0.add(card0);
      gameState0.players = list1;
      Player player0 = new Player(gameState0, (String) null);
      gameState0.players = list1;
      arrayList0.add(card0);
      player0.player_username = "[:q6bHJD0T4Zf3";
      player0.coins = 0;
      player0.coins = 0;
      int int0 = player0.numBuys;
      player0.initializePlayerTurn();
      gameState0.players = list1;
      player0.endTurn();
      player0.Trash = null;
      try { 
        player0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // balesh.dominion.Player
         //
         assertThrownBy("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      Player player0 = new Player(gameState0, "rfHwW2n;k6J:h&ph-");
      player0.endTurn();
      List<Card> list1 = player0.playedCards;
      player0.playedCards = list0;
      player0.toString();
      player0.discard = gameState0.cards;
      int int0 = (-987);
      List<Card> list2 = null;
      gameState0.cards = null;
      Randomness.nextRandomInt((-987));
      // Undeclared exception!
      try { 
        player0.scoreFor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("balesh.dominion.Player", e);
      }
  }
}
