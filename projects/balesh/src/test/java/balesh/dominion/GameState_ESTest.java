/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 20 19:36:56 GMT 2017
 */

package balesh.dominion;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import balesh.dominion.Card;
import balesh.dominion.GameState;
import balesh.dominion.Player;
import balesh.dominion.Randomness;
import java.io.ObjectStreamConstants;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.TooManyResourcesException;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GameState_ESTest extends GameState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      gameState0.addPlayer((Player) null);
      Card.CardName card_CardName0 = Card.CardName.Moat;
      Card.getCard(arrayList0, card_CardName0);
      Integer integer0 = new Integer(0);
      gameState0.gameBoard.put((Card) null, integer0);
      Player player0 = new Player(gameState0, "");
      gameState0.addPlayer(player0);
      gameState0.isGameOver();
      // Undeclared exception!
      try { 
        gameState0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("balesh.dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      gameState0.play();
      gameState0.clone();
      Player player0 = new Player(gameState0, (String) null);
      stack0.add((Card) null);
      gameState0.addPlayer(player0);
      List<Card> list0 = Card.createCards();
      gameState0.cards = list0;
      player0.scoreFor();
      gameState0.addPlayer(player0);
      Stack<Player> stack1 = new Stack<Player>();
      Random.setNextRandom(3162);
      gameState0.addPlayer(player0);
      gameState0.toString();
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      gameState0.play();
      gameState0.clone();
      Player player0 = new Player(gameState0, (String) null);
      gameState0.addPlayer(player0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      gameState0.addPlayer(player0);
      Stack<Player> stack1 = new Stack<Player>();
      Card.CardName card_CardName0 = Card.CardName.Witch;
      Card.getCard(gameState0.cards, card_CardName0);
      stack0.add((Card) null);
      Random.setNextRandom(3162);
      gameState0.toString();
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("balesh.dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      Player player0 = new Player(gameState0, "h1Hl(xn!G");
      gameState0.addPlayer(player0);
      Card.CardName card_CardName0 = Card.CardName.Cellar;
      Card.getCard(arrayList0, card_CardName0);
      Integer integer0 = Integer.valueOf(4);
      gameState0.gameBoard.put((Card) null, integer0);
      // Undeclared exception!
      try { 
        gameState0.play();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         assertThrownBy("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      Card.CardName card_CardName0 = Card.CardName.Cellar;
      Card.getCard(arrayList0, card_CardName0);
      Integer integer0 = new Integer((-1210));
      hashMap0.put((Card) null, integer0);
      gameState0.gameBoard = hashMap0;
      gameState0.gameBoard = hashMap0;
      gameState0.isGameOver();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Randomness.reset(3007L);
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      Player player0 = new Player(gameState0, "");
      player0.drawCard();
      HashMap<Card, Integer> hashMap0 = new HashMap<Card, Integer>();
      gameState0.gameBoard = hashMap0;
      vector0.insertElementAt((Card) null, 0);
      player0.discard = gameState0.cards;
      gameState0.players = null;
      vector0.add((Card) null);
      gameState0.toString();
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("balesh.dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      Randomness.random = (java.util.Random) mockRandom0;
      LinkedList<Card> linkedList0 = new LinkedList<Card>();
      GameState gameState0 = new GameState((List<Card>) linkedList0);
      linkedList0.addAll((Collection<? extends Card>) gameState0.cards);
      gameState0.play();
      Player player0 = new Player(gameState0, "");
      gameState0.addPlayer(player0);
      Card.Type.values();
      gameState0.addPlayer(player0);
      gameState0.play();
      Card.CardName.values();
      Stack<Card> stack0 = new Stack<Card>();
      Card.CardName card_CardName0 = Card.CardName.Moneylender;
      Card.getCard(stack0, card_CardName0);
      linkedList0.add((Card) null);
      Randomness.random = (java.util.Random) mockRandom0;
      // Undeclared exception!
      try { 
        gameState0.isGameOver();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("balesh.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      gameState0.initializeGame();
      gameState0.addPlayer((Player) null);
      // Undeclared exception!
      try { 
        gameState0.getWinners();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("balesh.dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = (MockRandom)Randomness.random;
      Card.Type.values();
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      Card.CardName card_CardName0 = Card.CardName.Woodcutter;
      Card.getCard(arrayList0, card_CardName0);
      arrayList0.add((Card) null);
      // Undeclared exception!
      try { 
        gameState0.isGameOver();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("balesh.dominion.Card", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GameState gameState0 = new GameState((List<Card>) null);
      gameState0.getWinners();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      gameState0.isGameOver();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Card.Type.values();
      Vector<Card> vector0 = new Vector<Card>();
      GameState gameState0 = new GameState((List<Card>) vector0);
      HashMap<Card, Integer> hashMap0 = gameState0.gameBoard;
      gameState0.gameBoard = hashMap0;
      gameState0.toString();
      Vector<Player> vector1 = new Vector<Player>();
      Card.CardName card_CardName0 = Card.CardName.Cellar;
      vector1.setSize(1705);
      GameState gameState1 = gameState0.clone();
      Player player0 = new Player(gameState1, "y'q8");
      vector1.add(player0);
      Card.getCard(gameState0.cards, card_CardName0);
      vector0.addElement((Card) null);
      gameState0.players = (List<Player>) vector1;
      gameState0.initializeGame();
      gameState0.cards = (List<Card>) vector0;
      // Undeclared exception!
      try { 
        Card.CardName.valueOf("The board game is empty. Please initialize the game.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant balesh.dominion.Card.CardName.The board game is empty. Please initialize the game.
         //
         assertThrownBy("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      gameState0.play();
      gameState0.clone();
      Player player0 = new Player(gameState0, (String) null);
      gameState0.addPlayer(player0);
      gameState0.toString();
      gameState0.addPlayer(player0);
      player0.scoreFor();
      gameState0.addPlayer(player0);
      Stack<Player> stack1 = new Stack<Player>();
      gameState0.addPlayer(player0);
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      gameState0.cards = (List<Card>) stack0;
      Player player0 = new Player(gameState0, (String) null);
      gameState0.addPlayer(player0);
      gameState0.addPlayer(player0);
      // Undeclared exception!
      try { 
        gameState0.initializeGame();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      Card.CardName card_CardName0 = Card.CardName.Moat;
      Card.getCard(arrayList0, card_CardName0);
      Integer integer0 = new Integer(0);
      gameState0.gameBoard.put((Card) null, integer0);
      Player player0 = new Player(gameState0, "");
      gameState0.addPlayer(player0);
      gameState0.isGameOver();
      gameState0.toString();
      gameState0.getWinners();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<Card> arrayList0 = new ArrayList<Card>();
      GameState gameState0 = new GameState((List<Card>) arrayList0);
      Card.CardName card_CardName0 = Card.CardName.Cellar;
      Card.getCard(arrayList0, card_CardName0);
      Integer integer0 = new Integer(4);
      gameState0.gameBoard.put((Card) null, integer0);
      gameState0.play();
      // Undeclared exception!
      try { 
        gameState0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("balesh.dominion.GameState", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      List<Card> list0 = Card.createCards();
      GameState gameState0 = new GameState(list0);
      try { 
        gameState0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // balesh.dominion.Card
         //
         assertThrownBy("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player((GameState) null, "kdOB,GjB6fPBnF+c:WG");
      List<Card> list0 = player0.discard;
      GameState gameState0 = new GameState(list0);
      gameState0.addPlayer(player0);
      try { 
        gameState0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // balesh.dominion.Player
         //
         assertThrownBy("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Stack<Card> stack0 = new Stack<Card>();
      GameState gameState0 = new GameState((List<Card>) stack0);
      gameState0.gameBoard = gameState0.gameBoard;
      Card.CardName card_CardName0 = Card.CardName.Village;
      Card.getCard(stack0, card_CardName0);
      Integer integer0 = new Integer(1);
      gameState0.gameBoard.put((Card) null, integer0);
      gameState0.initializeGame();
      gameState0.addPlayer((Player) null);
      gameState0.isGameOver();
      // Undeclared exception!
      try { 
        gameState0.play();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("balesh.dominion.GameState", e);
      }
  }
}
